#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Docker CLI commands

#!markdown

## cp

Copies files from host to a container

    docker cp localfilepath\filename.ext containername:/path/to/folder/filename.ext

#!markdown

# rm

Remove container(s) specified.

    docker rm $(docker ps -a -q)   // removes all containers. Note -q returns container's id

    docker rm container-id -f       // Deletes a container even if it is running

#!markdown

## port

Shows container's exposed ports.

    docker port sql2019

#!markdown

## inspect

Shows complete information of an image in a jason-like format.

    docker inspect 2489

#!markdown

## version, info, system

These sub-commands show information about the installed docker and do some tasks about the docker system like deleting unused images

    docker version

Shows the version information of both client and server side of the docker on your system.

    docker info 

Shows information about the docker and also the system on which it is installed.


    docker system df

Show how much storage is dedicated to docker images and containers

    docker system prune -a -f   

Deletes all unused and dangling images forcably.

Note : A dangling image is an image that is not tagged and is not used by any container.

#!markdown

## kill

Kills one or more running container.

    docker kill container-id

The exit code would not be 0 if you use "kill" command.

    docker kill $(docker ps -q)

Kills all running containers 

#!markdown

## exec

Executes a command in a container

    docker exec -it container-id bash   // Execues bash in container and opens the 
                                        // shell in interactive mode

#!markdown

## run


Create and run a new container from an image

    docker run -p 4080:80       // maps host port(left) to container port(right)
    -p 4443:443                 // You can map as many ports as you want using -p
    -v C:\TEMP\:/root/docker    // Maps a VOLUME
    -e Testvar = 1234           // You can assign an enviromental variable in the container
                                // These env. variables can override variables in the container
    --name  [container_name]    // Is the name of the container
    -d                          // runs the container in disconnected mode in background
    -i                          // runs the container in interactive mode which
                                // enables to coonect to the container
    -t                          // You can connect to the pseudoterminal (tty)
    --restart= no               // The default value is 'no'.
    --restart= on-failure:5     // restarts 5 times the container in case of failure and then stops
    --restart= unless-stppod    // restarts the container if it stopped for any reason
    --restart= always           // restarts the container when you stop the container manually
    --rm                        // It is used just in develeopment environments
                                // It removes the container just after you stopped the container
    -h [host-name]              // sets a hostname for the container to be used 
                                // in network environment and dns resolutions
    --label [label-name]        // Any meta data you want to assign to the container
    -P                          // Assigning random ports of the host to exposed ports of the container
    image:tag                   // name of the image you want to run
                                // if the image has just one tag and the tag is 'latest'
                                // you dont need to explicitly name it.

#!markdown

## build

    docker build -f [file-path]
    --label  [label-name]               // You can add more labels by repeating --label in the command
    -q                                  // for quiet mode
    --rm=false                          // does not remove intermediate images                                
    -t [image-name]:[image-tag]         // assigns a name to the image
    -t [image-name]:[image-tag]         // assigns a name to the image again
    .                                   // the current directory will be the source for creating image
